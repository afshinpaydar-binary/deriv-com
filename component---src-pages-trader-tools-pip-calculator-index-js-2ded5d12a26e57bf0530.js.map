{"version":3,"sources":["webpack:///./src/pages/trader-tools/pip-calculator/_pip-calculator.js","webpack:///./src/pages/trader-tools/pip-calculator/index.js"],"names":["PipCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","jc","ai","to","color","localize","src","RightArrow","alt","height","width","style","margin","direction","as","type","align","weight","mt","mb","enableReinitialize","initialValues","accountType","marginSymbol","symbol","volume","pointValue","optionList","syntheticItemLists","contractSize","validate","resetValidationPip","onSubmit","values","setFieldValue","getPipValue","numberSubmitFormat","setFieldError","setFieldTouched","handleBlur","errors","touched","setErrors","resetForm","isValid","dirty","htmlFor","numberWithCommas","tablet","active","onClick","disabled","financialItemLists","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","getCurrency","getContractSize","error","onBlur","autocomplete","name","field","autoComplete","handleError","current_input","focus","maxLength","background","secondary","translate_text","components","key","has_single_state","header","header_style","item_style","plus","Desktop","pip_value_formula","pip_info","Mobile","pip_value_formula_mobile","pip_info_mobile","pip_value_forex_formula","pip_value_forex_formula_mobile","is_deriv_app_link","external","target","rel","WithIntl","title","description"],"mappings":"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","file":"component---src-pages-trader-tools-pip-calculator-index-js-2ded5d12a26e57bf0530.js","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport {\n    getPipValue,\n    resetValidationPip,\n    getCurrency,\n    getContractSize,\n    numberWithCommas,\n    numberSubmitFormat,\n} from '../common/_utility';\nimport {\n    optionItemDefault,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    BreadCrumbContainer,\n    CalculateButton,\n    CalculatorBody,\n    CalculatorDropdown,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorTabItem,\n    ContentContainer,\n    FormWrapper,\n    header_style,\n    InputGroup,\n    item_style,\n    LinkWrapper,\n    RightContent,\n    SectionSubtitle,\n    StyledLinkButton,\n    StyledSection,\n    FormulaText,\n    StyledOl,\n} from '../common/_style'\nimport {\n    Accordion,\n    AccordionItem,\n    Header,\n    LocalizedLinkText,\n    QueryImage,\n    Text,\n} from 'components/elements'\nimport Input from 'components/form/input'\nimport RightArrow from 'images/svg/black-right-arrow.svg'\nimport { Flex, Show } from 'components/containers'\nimport { localize, Localize } from 'components/localization'\n\nconst PipCalculator = () => {\n    const query = graphql`\n        query {\n            pip_value_formula: file(relativePath: { eq: \"trade-tools/pip-value-formula.png\" }) {\n                ...fadeIn\n            }\n            pip_value_forex_formula: file(relativePath: { eq: \"trade-tools/pip-value-forex-formula.png\" }) {\n                ...fadeIn\n            }\n            pip_value_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/pip-value-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            pip_value_forex_formula_mobile: file(relativePath: { eq: \"trade-tools/pip-value-forex-formula-mobile.png\" }) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    return (\n        <>\n            <BreadCrumbContainer>\n                <Flex jc=\"flex-start\" ai=\"center\">\n                    <LocalizedLinkText to=\"/trader-tools\" color=\"grey-5\">\n                        {localize(\"Traders' tools\")}\n                    </LocalizedLinkText>\n                    <img\n                        src={RightArrow}\n                        alt={localize('right arrow')}\n                        height=\"16\"\n                        width=\"16\"\n                        style={{ margin: '0 8px' }}\n                    />\n                    <Text>{localize('Pip calculator')}</Text>\n                </Flex>\n            </BreadCrumbContainer>\n            <StyledSection direction=\"column\">\n                <SectionSubtitle as=\"h3\" type=\"sub-section-title\" align=\"center\" weight=\"normal\">\n                    {localize(\n                        'Our pip calculator helps you to estimate the pip value in your trades so that you can better manage your risk.',\n                    )}\n                </SectionSubtitle>\n\n                <ContentContainer mt=\"8rem\" mb=\"4rem\">\n                    <FormWrapper>\n                        <Formik\n                            enableReinitialize\n                            initialValues={{\n                                accountType: 'Synthetic',\n                                margin: 0,\n                                marginSymbol: 'USD',\n                                symbol: '',\n                                volume: '',\n                                pointValue: '',\n                                optionList: syntheticItemLists,\n                                contractSize: '',\n                            }}\n                            validate={resetValidationPip}\n                            onSubmit={(values, { setFieldValue }) => {\n                                setFieldValue('margin', getPipValue(values))\n                                setFieldValue('volume', numberSubmitFormat(values.volume))\n                                setFieldValue('pointValue', numberSubmitFormat(values.pointValue))\n                            }}\n                        >\n                            {({\n                                values,\n                                setFieldValue,\n                                setFieldError,\n                                setFieldTouched,\n                                handleBlur,\n                                errors,\n                                touched,\n                                setErrors,\n                                resetForm,\n                                isValid,\n                                dirty,\n                            }) => (\n                                <CalculatorForm>\n                                    <CalculatorHeader>\n                                        <CalculatorLabel htmlFor=\"message\">\n                                            {localize('Pip value')}\n                                        </CalculatorLabel>\n                                        <CalculatorOutputContainer>\n                                            <CalculatorOutputField>\n                                                {numberWithCommas(values.margin)}\n                                            </CalculatorOutputField>\n                                            <CalculatorOutputSymbol>\n                                                {values.marginSymbol}\n                                            </CalculatorOutputSymbol>\n                                        </CalculatorOutputContainer>\n                                    </CalculatorHeader>\n\n                                    <CalculatorBody>\n                                        <CalculatorLabel>\n                                            {localize('Account type')}\n                                        </CalculatorLabel>\n                                        <Flex\n                                            mb=\"3rem\"\n                                            mt=\"1rem\"\n                                            jc=\"space-between\"\n                                            tablet={{ height: 'unset' }}\n                                        >\n                                            <CalculatorTabItem\n                                                active={tab === 'Synthetic'}\n                                                onClick={() => {\n                                                    onTabClick('Synthetic')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Synthetic')}</Text>\n                                            </CalculatorTabItem>\n                                            <CalculatorTabItem\n                                                active={tab === 'Financial'}\n                                                disabled={tab === 'Financial'}\n                                                onClick={() => {\n                                                    onTabClick('Financial')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                    setFieldValue('accountType', 'Financial')\n                                                    setFieldValue('optionList', financialItemLists)\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Financial')}</Text>\n                                            </CalculatorTabItem>\n                                        </Flex>\n\n                                        <CalculatorDropdown\n                                            option_list={values.optionList}\n                                            label={localize('Symbol')}\n                                            default_option={optionItemDefault}\n                                            selected_option={values.symbol}\n                                            id=\"symbol\"\n                                            onChange={(value) => {\n                                                setFieldValue(\n                                                    'marginSymbol',\n                                                    getCurrency(value),\n                                                )\n                                                setFieldValue(\n                                                    'contractSize',\n                                                    getContractSize(value),\n                                                )\n                                                setFieldValue('symbol', value)\n                                            }}\n                                            error={touched.symbol && errors.symbol}\n                                            onBlur={handleBlur}\n                                            autocomplete=\"off\"\n                                            contractSize={values.contractSize}\n                                        />\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"volume\"\n                                                value={values.volume}\n                                                onChange={(value) => {\n                                                    setFieldValue('volume', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"volume\"\n                                                        type=\"text\"\n                                                        label={localize('Volume')}\n                                                        autoComplete=\"off\"\n                                                        error={touched.volume && errors.volume}\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('volume', '', false)\n                                                            setFieldError('volume', '')\n                                                            setFieldTouched('volume', false, false)\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength=\"8\"\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"pointValue\"\n                                                value={values.pointValue}\n                                                onChange={(value) => {\n                                                    setFieldValue('pointValue', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"pointValue\"\n                                                        type=\"text\"\n                                                        label={localize('Point Value')}\n                                                        autoComplete=\"off\"\n                                                        error={\n                                                            touched.pointValue && errors.pointValue\n                                                        }\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('pointValue', '', false)\n                                                            setFieldError('pointValue', '')\n                                                            setFieldTouched(\n                                                                'pointValue',\n                                                                false,\n                                                                false,\n                                                            )\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength=\"15\"\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n                                        <Flex mt=\"3rem\">\n                                            <CalculateButton\n                                                secondary\n                                                type=\"submit\"\n                                                disabled={!isValid || !dirty}\n                                            >\n                                                {localize('Calculate')}\n                                            </CalculateButton>\n                                        </Flex>\n                                    </CalculatorBody>\n                                </CalculatorForm>\n                            )}\n                        </Formik>\n                    </FormWrapper>\n\n                    <RightContent>\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('How to calculate pip value')}\n                        </Header>\n\n                        <Text>\n                            {localize('The pip value for a contract on DMT5 is calculated based on this formula:')}\n                        </Text>\n                        <Text mb=\"1.6rem\">\n                            <Localize\n                                translate_text=\"<0>Pip value = point value × volume × contract size</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n\n                        <Text mb=\"1.6rem\">\n                            {localize('For synthetic accounts, the pip value is calculated in USD.')}\n                        </Text>\n                        <Text mb=\"40px\">\n                            {localize(\n                                'For financial accounts, the pip value is in the quote currency for forex pairs.',\n                            )}\n                        </Text>\n\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('Example calculation')}\n                        </Header>\n\n                        <Accordion has_single_state>\n                            <AccordionItem\n                                header={localize('Pip value for synthetic indices')}\n                                header_style={header_style}\n                                style={item_style}\n                                plus\n                            >\n                                <Text mb=\"16px\">\n                                    {localize(\n                                        'Let’s say you want to trade 1 lot of Volatility 75 Index.',\n                                    )}\n                                </Text>\n\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.pip_value_formula}\n                                        alt={localize('Margin formula')}\n                                    />\n                                    <QueryImage\n                                        data={data.pip_info}\n                                        alt={localize('Pip Info')}\n                                    />\n                                </Show.Desktop>\n\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.pip_value_formula_mobile}\n                                        alt={localize('Margin formula mobile')}\n                                    />\n                                    <QueryImage\n                                        data={data.pip_info_mobile}\n                                        alt={localize('Pip Info')}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText>\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                {localize('The point value is derived from the current digits of the assets. In the example, the digit is 2, so the point value is 0.01.')}\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                {localize('The contract size is one standard lot of Volatility 75 index = 1')}\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                                <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So your pip value is <0>0.01 USD</0>.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n\n                            </AccordionItem>\n                            <AccordionItem\n                                header={localize('Pip value for forex')}\n                                header_style={header_style}\n                                style={item_style}\n                                plus\n                            >\n                                <Text mb=\"16px\">\n                                    {localize(\n                                        'Let’s say you want to trade 2 lots of EUR/USD.',\n                                    )}\n                                </Text>\n\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.pip_value_forex_formula}\n                                        alt={localize('Pip Forex formula')}\n                                    />\n                                </Show.Desktop>\n\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.pip_value_forex_formula_mobile}\n                                        alt={localize('Pip Forex formula')}\n                                    />\n                                </Show.Mobile>\n\n                                <FormulaText>\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                {localize('The point value is derived from the current digits of the assets. In the example, the digit is 5, so the point value is 0.00001.')}\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                {localize('One standard lot of forex = 100,000 units')}\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n\n                                <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So your pip value is <0>2 USD</0>.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                            </AccordionItem>\n                        </Accordion>\n\n                        <LinkWrapper>\n                            <StyledLinkButton\n                                secondary=\"true\"\n                                is_deriv_app_link\n                                to=\"/mt5\"\n                                external=\"true\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {localize('Go to DMT5 dashboard')}\n                            </StyledLinkButton>\n                        </LinkWrapper>\n                    </RightContent>\n                </ContentContainer>\n            </StyledSection>\n        </>\n    )\n}\n\nexport default PipCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport PipCalculatorSection from './_pip-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst PipCalculator = () => {\n    return (\n        <Layout>\n            <SEO\n                title={localize('Pip Calculator')}\n                description={localize('Pip Calculator')}\n            />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Pip Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <PipCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(PipCalculator)\n"],"sourceRoot":""}